IssueType,EpicName,Summary,EpicLink,Description,Status
Story,Core Application Functionality,Implement Dashboard Views,Core Application Functionality,"Create dynamic and user-friendly dashboard views to display emissions data, analytics, and personalized information.",Open
Task,Core Application Functionality,Fetch data for total emissions widget,Implement Dashboard Views,"Retrieve and display data for the total emissions widget on the dashboard, ensuring accuracy and timeliness.",Open
Task,Core Application Functionality,Display live emissions data feed,Implement Dashboard Views,"Implement a live feed on the dashboard to show real-time emissions data, enhancing user engagement and awareness.",Open
Task,Core Application Functionality,Visualize Scope 1 and 2 analytics,Implement Dashboard Views,"Create visualizations for Scope 1 and 2 emissions analytics, providing insightful and actionable data representation.",Open
Task,Core Application Functionality,Allow filtering by date ranges,Implement Dashboard Views,"Develop a feature to filter emissions data by various date ranges, enabling users to view specific timeframes.",Open
Task,Core Application Functionality,Integrate charting libraries for graphs,Implement Dashboard Views,Incorporate charting libraries to generate interactive and informative graphs for emissions data on the dashboard.,Open
Task,Core Application Functionality,Build user-specific dashboard layout,Implement Dashboard Views,Design a customizable dashboard layout that adapts to individual user preferences and needs.,Open
Task,Core Application Functionality,Add customization options for users,Implement Dashboard Views,"Develop options for users to customize their dashboard view, including widget selection and layout preferences.",Open
Task,Core Application Functionality,Conduct user testing for dashboard usability,Implement Dashboard Views,"Perform user testing to gather feedback on the dashboard's usability, effectiveness, and user experience.",Open
Story,Core Application Functionality,Develop Emission Tracking System,Core Application Functionality,"Build a system for real-time emission tracking, categorizing data sources, and persisting metrics to the database.",Open
Task,Core Application Functionality,"Ingest data sources - APIs, CSVs",Develop Emission Tracking System,"Implement data ingestion from various sources like APIs and CSV files, ensuring reliable and efficient data collection.",Open
Task,Core Application Functionality,Transform & validate ingested data,Develop Emission Tracking System,Process and validate the ingested emissions data to ensure accuracy and consistency before storage.,Open
Task,Core Application Functionality,Categorize emissions by source,Develop Emission Tracking System,"Organize the emissions data into categories based on their sources, aiding in analysis and reporting.",Open
Task,Core Application Functionality,Persist aggregated metrics to database,Develop Emission Tracking System,"Store the processed and categorized emissions data in the database, ensuring data integrity and accessibility.",Open
Task,Core Application Functionality,Expose GET endpoints for emission data,Develop Emission Tracking System,"Create API endpoints to retrieve emission data, providing access to the stored information for various purposes.",Open
Task,Core Application Functionality,Display categorized metrics on frontend,Develop Emission Tracking System,"Show the categorized emissions data on the frontend, enabling users to view and interact with the information.",Open
Task,Core Application Functionality,Detect anomalies in emission streams,Develop Emission Tracking System,"Implement anomaly detection in the emission data streams, identifying irregular patterns or unusual data points.",Open
Task,Core Application Functionality,Implement a feedback mechanism for continuous improvement,Develop Emission Tracking System,"Establish a system to gather and incorporate user feedback, continually enhancing the emission tracking system.",Open
Story,Core Application Functionality,Add Planning Capabilities,Core Application Functionality,"Enable users to set emission goals, plan reduction activities, and track progress towards sustainability targets.",Open
Task,Core Application Functionality,Allow users to set emission goals,Add Planning Capabilities,"Develop functionality for users to set and manage their emission reduction goals, aligning with organizational objectives.",Open
Task,Core Application Functionality,Capture planned reduction activities,Add Planning Capabilities,Create features for users to input and track planned activities aimed at reducing emissions.,Open
Task,Core Application Functionality,Calculate progress towards targets,Add Planning Capabilities,Implement tools to calculate and display the progress made towards achieving set emission reduction targets.,Open
Task,Core Application Functionality,Forecast future emissions,Add Planning Capabilities,Develop forecasting capabilities to predict future emissions based on current data and trends.,Open
Task,Core Application Functionality,Run what-if projections,Add Planning Capabilities,"Create a feature for running what-if scenarios, helping users explore potential outcomes of different actions.",Open
Task,Core Application Functionality,Provide recommended mitigations,Add Planning Capabilities,"Offer recommendations for emission reduction based on data analysis, assisting users in making informed decisions.",Open
Task,Core Application Functionality,Enhance user interface for planning features,Add Planning Capabilities,"Design an intuitive and user-friendly interface for the planning tools, ensuring ease of use and engagement.",Open
Task,Core Application Functionality,Gather user feedback on planning tools,Add Planning Capabilities,Collect user feedback on the planning features to identify areas for improvement and user needs.,Open
Task,Core Application Functionality,Conduct thorough testing and quality assurance,Implement Dashboard Views,"Conduct thorough testing and quality assurance for the implementation of dashboard views, focusing on user experience and data accuracy.",Open
Task,Core Application Functionality,Conduct thorough testing and quality assurance,Develop Emission Tracking System,"Ensure rigorous testing and quality assurance for the emission tracking system, emphasizing data integrity and real-time performance.",Open
Task,Core Application Functionality,Regularly update documentation to reflect current state,Implement Dashboard Views,"Keep the documentation for dashboard implementation current, detailing user interface design and functionalities.",Open
Task,Core Application Functionality,Regularly update documentation to reflect current state,Develop Emission Tracking System,"Update documentation consistently for the emission tracking system, covering data sources, processing, and display methods.",Open
Task,Core Application Functionality,Establish a user feedback loop for continuous product improvement,Implement Dashboard Views,Create a system for collecting and integrating user feedback for ongoing improvement of dashboard views.,Open
Task,Core Application Functionality,Establish a user feedback loop for continuous product improvement,Develop Emission Tracking System,Develop a feedback loop for the emission tracking system to gather user insights and suggestions for continuous enhancements.,Open
Story,Enterprise Functionality,Implement Multi-tenancy,Enterprise Functionality,Design and execute a multi-tenant architecture to support different client environments securely and efficiently.,Open
Task,Enterprise Functionality,Architect tenant schema in database,Implement Multi-tenancy,"Develop a database schema that supports multi-tenancy, ensuring data isolation and scalability.",Open
Task,Enterprise Functionality,Isolate tenant data,Implement Multi-tenancy,Ensure that data for each tenant is isolated to maintain privacy and security.,Open
Task,Enterprise Functionality,Add tenant ID to requests,Implement Multi-tenancy,"Modify API requests to include tenant identification, ensuring data scope is restricted to the relevant tenant.",Open
Task,Enterprise Functionality,Scope API data queries by tenant,Implement Multi-tenancy,"Adjust API queries to filter data based on tenant ID, ensuring accurate data retrieval for multi-tenant environment.",Open
Task,Enterprise Functionality,Build tenant registration workflow,Implement Multi-tenancy,Create a workflow for new tenants to register and set up their unique environment.,Open
Task,Enterprise Functionality,Support custom tenant configurations,Implement Multi-tenancy,Develop functionality to allow tenants to customize settings and configurations for their specific needs.,Open
Task,Enterprise Functionality,Ensure data security and privacy for tenants,Implement Multi-tenancy,Implement robust security measures to protect tenant data and ensure compliance with privacy regulations.,Open
Story,Enterprise Functionality,Add Account Upgrade System,Enterprise Functionality,"Create a system for users to upgrade their accounts, including payment processing and subscription management.",Open
Task,Enterprise Functionality,Integrate Stripe for payments,Add Account Upgrade System,Set up Stripe integration to handle secure payment processing for account upgrades.,Open
Task,Enterprise Functionality,Define account plans model,Add Account Upgrade System,Develop a model to define different account plans and features available for each.,Open
Task,Enterprise Functionality,Allow self-serve account upgrades,Add Account Upgrade System,Implement a user-friendly interface for users to upgrade their accounts independently.,Open
Task,Enterprise Functionality,Handle subscription management,Add Account Upgrade System,"Manage user subscriptions, including renewals, modifications, and billing.",Open
Task,Enterprise Functionality,Cancel/downgrade workflow,Add Account Upgrade System,Create a process for users to cancel or downgrade their subscriptions smoothly.,Open
Task,Enterprise Functionality,Optimize user experience during the upgrade process,Add Account Upgrade System,Enhance the user interface and workflow to ensure a seamless upgrade experience for users.,Open
Story,Enterprise Functionality,Transactional Email Capabilities,Enterprise Functionality,"Develop the ability to send transactional emails, including integration with an email service and template creation.",Open
Task,Enterprise Functionality,Integrate email delivery provider,Transactional Email Capabilities,Choose and integrate an email delivery service to handle transactional email sending.,Open
Task,Enterprise Functionality,Create email templates,Transactional Email Capabilities,Design and implement various email templates for different transactional emails.,Open
Task,Enterprise Functionality,Configure triggers for emails,Transactional Email Capabilities,Set up triggers in the system to send emails based on specific actions or events.,Open
Task,Enterprise Functionality,Validate emails during staging,Transactional Email Capabilities,Test and validate email functionality and appearance during the staging phase.,Open
Task,Enterprise Functionality,Parameterize emails using Jinja,Transactional Email Capabilities,Implement Jinja or a similar templating engine to dynamically insert data into emails.,Open
Task,Enterprise Functionality,Monitor and analyze email performance metrics,Transactional Email Capabilities,"Set up monitoring for email performance metrics like delivery rates, open rates, and click-through rates.",Open
Task,Enterprise Functionality,Conduct thorough testing and quality assurance,Implement Multi-tenancy,"Perform comprehensive testing and quality assurance for the multi-tenancy implementation, ensuring data isolation and system robustness.",Open
Task,Enterprise Functionality,Conduct thorough testing and quality assurance,Add Account Upgrade System,"Conduct detailed testing and quality assurance for the account upgrade system, focusing on payment processing and user experience.",Open
Task,Enterprise Functionality,Regularly update documentation to reflect current state,Implement Multi-tenancy,Ensure documentation for multi-tenancy is frequently updated to reflect the latest architecture and data handling methods.,Open
Task,Enterprise Functionality,Regularly update documentation to reflect current state,Add Account Upgrade System,"Maintain up-to-date documentation for the account upgrade system, including payment integration and subscription management.",Open
Task,Enterprise Functionality,Establish a user feedback loop for continuous product improvement,Implement Multi-tenancy,Institute a feedback mechanism for the multi-tenancy feature to ensure it meets user requirements and to guide further improvements.,Open
Task,Enterprise Functionality,Establish a user feedback loop for continuous product improvement,Add Account Upgrade System,Implement a process for gathering and applying user feedback on the account upgrade system to continuously refine the user experience.,Open
Story,Legacy Code Migration,Migrate Frontend to Next.js,Legacy Code Migration,"Set up the Next.js environment, migrate existing frontend templates and components, ensure responsive design and connect with the FastAPI backend.",Open
Task,Legacy Code Migration,Set up Next.js project scaffolding,Migrate Frontend to Next.js,"Create the base structure for the Next.js project, ensuring all necessary configurations are in place.",Open
Task,Legacy Code Migration,Install Tailwind CSS and dependencies,Migrate Frontend to Next.js,Add Tailwind CSS to the project and ensure all dependencies are correctly installed and configured.,Open
Task,Legacy Code Migration,Migrate components and shared UI elements,Migrate Frontend to Next.js,Move existing UI components and shared elements to the new frontend architecture.,Open
Task,Legacy Code Migration,Migrate over existing page templates,Migrate Frontend to Next.js,"Transfer existing frontend pages to the new Next.js framework, ensuring compatibility and functionality.",Open
Task,Legacy Code Migration,Connect pages to backend FastAPI endpoints,Migrate Frontend to Next.js,Link the frontend pages with the FastAPI backend endpoints to ensure seamless data flow and functionality.,Open
Task,Legacy Code Migration,Implement client-side routing,Migrate Frontend to Next.js,Establish client-side routing within the Next.js application for efficient navigation.,Open
Task,Legacy Code Migration,Set up authentication client integration,Migrate Frontend to Next.js,Integrate the authentication system into the Next.js client ensuring secure and effective user authentication.,Open
Task,Legacy Code Migration,Configure production build pipeline,Migrate Frontend to Next.js,Set up and configure the build pipeline for production deployment of the Next.js application.,Open
Task,Legacy Code Migration,Perform responsive design testing across multiple devices,Migrate Frontend to Next.js,Test the responsiveness of the Next.js application across various devices to ensure compatibility and usability.,Open
Task,Legacy Code Migration,Document the migration process and guidelines,Migrate Frontend to Next.js,Create documentation outlining the process and guidelines followed during the frontend migration for future reference.,Open
Story,Legacy Code Migration,Migrate Backend to FastAPI,Legacy Code Migration,"Establish the FastAPI framework, transfer existing Flask logic, set up new middleware, and integrate with the Supabase database.",Open
Task,Legacy Code Migration,Research & set up FastAPI project structure,Migrate Backend to FastAPI,Investigate the optimal structure for the FastAPI project and implement the foundational setup.,Open
Task,Legacy Code Migration,Containerize backend application,Migrate Backend to FastAPI,Create a containerized environment for the FastAPI application to enhance portability and scalability.,Open
Task,Legacy Code Migration,"Implement middleware - auth, schemas, logging",Migrate Backend to FastAPI,"Develop and integrate necessary middleware for authentication, schema validation, and logging in the FastAPI application.",Open
Task,Legacy Code Migration,Migrate over existing Flask endpoints,Migrate Backend to FastAPI,"Transfer and adapt existing Flask API endpoints to the new FastAPI framework, ensuring functionality and performance.",Open
Task,Legacy Code Migration,Connect endpoints to Supabase database,Migrate Backend to FastAPI,Link the FastAPI endpoints with the Supabase database for data storage and retrieval operations.,Open
Task,Legacy Code Migration,Set up background task processing,Migrate Backend to FastAPI,Implement background task processing capabilities within the FastAPI environment for asynchronous operations.,Open
Task,Legacy Code Migration,Create shared logic for API services,Migrate Backend to FastAPI,Develop common logic and services that can be reused across different parts of the API to streamline development.,Open
Task,Legacy Code Migration,Configure production deployment,Migrate Backend to FastAPI,Set up and configure the deployment process for the FastAPI application to ensure smooth transition to production.,Open
Task,Legacy Code Migration,"Implement API security measures, including rate limiting",Migrate Backend to FastAPI,"Migrate Backend to FastAPI,Enhance the security of the FastAPI application by implementing measures such as rate limiting to prevent abuse.",Open
Task,Legacy Code Migration,Write documentation for backend setup and best practices,Migrate Backend to FastAPI,Create comprehensive documentation detailing the setup and best practices for the FastAPI backend.,Open
Task,Legacy Code Migration,Conduct thorough testing and quality assurance,Migrate Frontend to Next.js,"Perform comprehensive testing and quality assurance for the frontend migration to Next.js, ensuring reliability and performance.",Open
Task,Legacy Code Migration,Conduct thorough testing and quality assurance,Migrate Backend to FastAPI,"Perform comprehensive testing and quality assurance for the backend migration to FastAPI, including API stability and security.",Open
Task,Legacy Code Migration,Regularly update documentation to reflect current state,Migrate Frontend to Next.js,Ensure documentation is regularly updated to reflect the latest developments in frontend migration to Next.js.,Open
Task,Legacy Code Migration,Regularly update documentation to reflect current state,Migrate Backend to FastAPI,"Maintain up-to-date documentation for backend migration to FastAPI, covering new structures, endpoints, and functionalities.",Open
Task,Legacy Code Migration,Establish a user feedback loop for continuous product improvement,Migrate Frontend to Next.js,Set up a feedback mechanism to continuously improve the frontend migration process based on user input.,Open
Task,Legacy Code Migration,Establish a user feedback loop for continuous product improvement,Migrate Backend to FastAPI,"Implement a feedback loop for continuous improvement in backend migration, incorporating user and stakeholder feedback.",Open
Epic,,Legacy Code Migration,,"Migrate the existing application from Python, Flask, and Bootstrap to a modern stack using Next.js and FastAPI",Open
Epic,,Core Application Functionality,,"Develop the central features of CarbonGPT, including dashboard, emissions tracking, planning tools, and data visualization.",Open
Epic,,Enterprise Functionality,,Implement advanced enterprise-level features to enhance functionality and user experience.,Open